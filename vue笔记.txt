1.vue简介（基于数据的开发方式？）
js框架、简化DOM操作、响应式数据驱动
2.vue程序
①导入开发版本的vue.js
②创建vue实例对象，设置el属性和data属性
③使用模板语法把数据渲染到页面上
3.el：挂载点
el是用来设置vue实例挂载（管理）的元素
作用范围：vue会管理el选项命中的元素及其内部的后代元素
可以使用其他的选择器，但建议使用ID选择器
可以设置其他的dom元素，但不能使用HTML和body
4.data：数据对象
vue中用到的数据定义在data中
data中可以写复杂类型的数据
列表数据使用数组保存
渲染复杂类型数据时，遵守js的语法即可
5.本地应用v-text
作用：设置标签的内容，内部支持写表达式，
默认替换全部内容，使用差值表达式{{}}可以替换指定内容
eg.<h2 v-text = "message+'!'"></h2>
6.本地应用v-html
作用：设置元素的innerHTML（解析html结构使用）
内容中有html结构会被解析为标签，v-text只会解析为文本
7.本地应用v-on
作用：为元素绑定事件
事件不需要写on，指令可以简写为@，绑定的方法定义在methods属性中
方法中通过this关键字可以访问定义在data中的数据
补充：（传递自定义参数和事件修饰符）
定义方法时定义形参可接收传入的实参
事件后跟上.修饰符可对事件进行限制，例如.enter可以限制触发的按键为回车
8.本地应用v-show
作用：根据真假切换元素的显示状态
原理：修改元素的display，实现显示隐藏
指令后面的内容，最终会解析为布尔值（true显示，false隐藏）
数据改变后，对应元素的显示状态会同步更新
9.本地应用v-if
作用：根据真假切换元素的显示状态（和v-show相同点）
原理：操作dom元素来实现切换
true时元素存在于dom树中，false时则从dom树中移除
频繁的切换用v-show（切换消耗小），反之用v-if
10.本地应用v-bind
作用：为元素绑定属性
完整写法：v-bind:属性名，简写省略v-bind（即:属性名）
需要动态的增删class：
方法一：三元表达式，:class = "isActive?'active':''"，
（isActive真时加上类名active，反之为空）
建议使用方法二：使用对象的方式，:class = "{active:isActive}"
（active属性是否生效取决于isActive的值）
11.本地应用v-for
作业：根据数据生成列表结构
数组经常和v-for结合使用
语法：(item, index) in 数据 （item, index可改名）
item和index可以结合其他指令一起使用
数组长度的更新会同步到页面，是响应式的
12.本地应用v-model
作用：便捷地设置和获取表单元素的值（双向数据绑定）
绑定的数据会和表单元素值相关联
13.axios，网络请求库
axios.get(地址?key=value&key2=value2).then(function(response){},function(err){}}
axios.post(地址,{key:value,key2:value2}).then(function(response){},function(err){}}
先导入再使用，使用get或post方法即可发送对应的请求，
then方法中的回调函数会在请求成功或失败时触发，
通过回调函数的形参可以获取响应内容或错误信息
github.com/axios/axios
14.axios+vue
axios回调函数中的this已经改变，无法访问到data中的数据
解决办法：把this保存起来，回调函数中直接使用保存的this即可
和本地应用最大区别：改变了数据来源














 